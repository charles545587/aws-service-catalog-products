# Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
# SPDX-License-Identifier: Apache-2.0

AWSTemplateFormatVersion: 2010-09-09
Description: |
  Resources needed for custodian hub account
  {"framework": "servicecatalog-products", "role": "product", "product-set": "cloud-custodian", "product": "pipeline", "version": "v1"}

Parameters:

  C7NVersion:
    Type: String
    Description: which version of cloud custodian should be used
    Default: "0.9.6"

  C7NMailerVersion:
    Type: String
    Description: which version of cloud custodian mailer should be used
    Default: "0.6.5"

  C7NOrgVersion:
    Type: String
    Description: which version of cloud custodian c7n orgs should be used
    Default: "0.3.1"

  CloudCustodianHubIAMRolePath:
    Type: String
    Description: Path to use for all IAM roles created in this template
    Default: "/cloudcustodian/"

  CloudCustodianHubIAMRoleName:
    Type: String
    Default: CustodianHub

  CloudCustodianSQSMailerQueueName:
    Type: String
    Default: CustodianSQSMailer
    Description: Provide a name for the Custodian SQS Queue
  CloudCustodianSNSTopicDisplayName:
    Type: String
    Default: CustodianAlerts
    Description: Enter a descriptive name for the SNS Alerts Topic

  CloudCustodianSNSTopicName:
    Type: String
    Default: CustodianAlerts
    Description: Enter a Topic Name for the SNS Alert Topic

  RepositoryProviderType:
    Type: String
    Description: The name of your code repository provider
    Default: "CodeCommit"
    AllowedValues:
      - CodeCommit
      - GitHub
      - Bitbucket
      - GitHubEnterpriseServer

  CloudCustodianPoliciesCodeCommitRepoName:
    Type: String
    Description: Name to give the codecommit repo to use for the custodian policies
    Default: CloudCustodianPolicies

  CodeStarConnectionArn:
    Type: String
    Description: The ARN of the CodeStar Connection needed for third party repo integration
    Default: ""

  ProviderRepositoryId:
    Type: String
    Description: The owner and name of the repository where source changes are to be detected
    Default: "(Ex: user/repository-name)"

  ProviderRepositoryBranchName:
    Type: String
    Description: The name of the branch where source changes are to be detected.
    Default: "master"

  Regions:
    Type: String
    Default: --region us-east-1

Conditions:
  IsProviderCodeCommit: !Equals [ !Ref RepositoryProviderType, CodeCommit ]

Resources:
  CloudCustodianSQSMailer:
    Type: AWS::SQS::Queue
    Description: SQS Queue to be used by c7n
    Properties:
      QueueName: !Ref CloudCustodianSQSMailerQueueName

  CloudCustodianSNSTopic:
    Type: AWS::SNS::Topic
    Description: SNS Topic to be used by c7n
    Properties:
      DisplayName: !Ref CloudCustodianSNSTopicDisplayName
      TopicName: !Ref CloudCustodianSNSTopicName

  CloudCustodianAdminRole:
    Type: AWS::IAM::Role
    Description: IAM Role to be used by c7n to run in the hub account
    Properties:
      RoleName: !Ref CloudCustodianHubIAMRoleName
      Path: !Ref CloudCustodianHubIAMRolePath
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
          - Effect: "Allow"
            Principal:
              AWS: !Sub "arn:${AWS::Partition}:iam::${AWS::AccountId}:root"
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - !Sub "arn:aws:iam::${AWS::Partition}:policy/AdministratorAccess"

  CloudCustodianCodeBuildRole:
    Type: AWS::IAM::Role
    Description: IAM Role for codebuild to use when provisioning and cleaning up c7n policies
    Properties:
      Path: !Ref CloudCustodianHubIAMRolePath
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - codebuild.amazonaws.com
      Policies:
        - PolicyName: ServiceCatalogActions
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - sts:AssumeRole
                Resource: !GetAtt CloudCustodianAdminRole.Arn
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSCodeBuildAdminAccess
        - arn:aws:iam::aws:policy/CloudWatchLogsFullAccess
        - arn:aws:iam::aws:policy/AmazonS3FullAccess

  CloudCustodianDeploymentPipelineRole:
    Type: 'AWS::IAM::Role'
    Description: IAM Role to be used by the pipeline to orchestrate the provisioning and clean up of c7n policies
    Properties:
      Path: !Ref CloudCustodianHubIAMRolePath
      AssumeRolePolicyDocument:
        Statement:
          - Action: 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service: codepipeline.amazonaws.com
        Version: 2012-10-17
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSCodePipelineFullAccess
        - arn:aws:iam::aws:policy/AWSCodeCommitFullAccess
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
        - arn:aws:iam::aws:policy/AWSCodeBuildAdminAccess
        - arn:aws:iam::aws:policy/CloudWatchLogsFullAccess
        - !Ref CloudCustodianDeploymentPipelineCustomPolicy

  CloudCustodianDeploymentPipelineCustomPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - codestar-connections:*
            Resource:
              - !Sub arn:${AWS::Partition}:codestar-connections:${AWS::Region}:${AWS::AccountId}:connection/*

  CloudCustodianPoliciesRepo:
    Type: AWS::CodeCommit::Repository
    Description: git repo for the policies
    Condition: IsProviderCodeCommit
    Properties:
      RepositoryName: !Ref CloudCustodianPoliciesCodeCommitRepoName


  CloudCustodianPipelineArtifactStore:
    Type: AWS::S3::Bucket
    Description: Bucket for artifacts from the pipeline
    Properties:
      PublicAccessBlockConfiguration:
        BlockPublicAcls: True
        BlockPublicPolicy: True
        IgnorePublicAcls: True
        RestrictPublicBuckets: True
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      VersioningConfiguration:
        Status: Enabled


  CloudCustodianPipeline:
    Type: AWS::CodePipeline::Pipeline
    Description: Pipeline used to provision and clean up c7n policies
    Properties:
      ArtifactStore:
        Type: S3
        Location:
          Ref: CloudCustodianPipelineArtifactStore
      RoleArn: !GetAtt CloudCustodianDeploymentPipelineRole.Arn
      Stages:
        - Name: Source
          Actions:
            - Name: RetrieveCodeAction
              ActionTypeId:
                Category: Source
                Owner: AWS
                Version: "1"
                Provider:
                  Fn::If:
                    - IsProviderCodeCommit
                    - CodeCommit
                    - CodeStarSourceConnection
              Configuration:
                RepositoryName:
                  Fn::If:
                    - IsProviderCodeCommit
                    - !GetAtt CloudCustodianPoliciesRepo.Name
                    - !Ref AWS::NoValue
                ConnectionArn:
                  Fn::If:
                    - IsProviderCodeCommit
                    - !Ref AWS::NoValue
                    - !Ref CodeStarConnectionArn
                FullRepositoryId:
                  Fn::If:
                    - IsProviderCodeCommit
                    - !Ref AWS::NoValue
                    - !Ref ProviderRepositoryId
                BranchName: !Ref ProviderRepositoryBranchName
                OutputArtifactFormat:
                  Fn::If:
                    - IsProviderCodeCommit
                    - !Ref AWS::NoValue
                    - CODE_ZIP
              RunOrder: 1
              OutputArtifacts:
                - Name: source
        - Name: ValidatePolicies
          Actions:
            - Name: CustodianPolicyValidation
              ActionTypeId:
                Category: Test
                Owner: AWS
                Provider: CodeBuild
                Version: '1'
              Configuration:
                ProjectName: !Ref CloudCustodianPolicyValidationProject
              InputArtifacts:
                - Name: source
              OutputArtifacts: []
              RunOrder: 1
        - Name: DeployCloudCustodianPolicies
          Actions:
            - Name: PolicyDeploy
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: '1'
              Configuration:
                ProjectName: !Ref CloudCustodianPolicyDeploymentProject
              InputArtifacts:
                - Name: source
              OutputArtifacts:
                - Name: deploymentArtifacts
              RunOrder: 1
            - Name: PolicyCleanup
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: '1'
              Configuration:
                ProjectName: !Ref CloudCustodianPolicyCleanupProject
              InputArtifacts:
                - Name: source
              OutputArtifacts:
                - Name: cleanupArtifacts
              RunOrder: 1


  CloudCustodianPolicyValidationProject:
    Type: AWS::CodeBuild::Project
    Description: "Will validate policies in c7n-policies"
    DependsOn: [ CloudCustodianCodeBuildRole ]
    Properties:
      Artifacts:
        Type: NO_ARTIFACTS
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/standard:4.0
        PrivilegedMode: false
        Type: LINUX_CONTAINER
      ServiceRole: !GetAtt CloudCustodianCodeBuildRole.Arn
      Source:
        BuildSpec: !Sub |
          version: '0.2'
          phases:
            install:
              runtime-versions:
                python: 3.x
              commands:
                - if [ -d "c7n-policies" ] || [ -d "c7n-org-policies" ]; then pip install c7n==${C7NVersion}; fi
                - if [ -d "c7n-policies" ] || [ -d "c7n-org-policies" ]; then pip install c7n-mailer==${C7NMailerVersion}; fi
            build:
              commands:
                - if [ -d "c7n-policies" ]; then custodian validate c7n-policies/*; fi
                - if [ -d "c7n-org-policies" ]; then custodian validate c7n-org-policies/*; fi
                - if [ ! -d "c7n-policies"]; then echo "WARNING - The c7n-policies directory does not exist, create a directory called c7n-policies and add your policies to this directory"; fi
                - if [ ! -d "c7n-org-policies" ]; then echo "WARNING - The c7n-org-policies directory does not exist, create a directory called c7n-org-policies and add your policies to this directory"; fi
        Type: NO_SOURCE

  CloudCustodianPolicyCleanupDryRunProject:
    Type: AWS::CodeBuild::Project
    Description: "Will run mugc dry-run policies for archive-policies"
    DependsOn: [ CloudCustodianCodeBuildRole ]
    Properties:
      Artifacts:
        Type: NO_ARTIFACTS
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/standard:4.0
        PrivilegedMode: false
        Type: LINUX_CONTAINER
      ServiceRole: !GetAtt CloudCustodianCodeBuildRole.Arn
      Source:
        BuildSpec: !Sub |
          version: '0.2'
          phases:
            install:
              runtime-versions:
                python: 3.x
              commands:
                - if [ ! -d "archive-policies" ]; then echo "INFO - There is no archive-policies directory, move policies from the c7n-policies directoy to the archive-policies directory";fi
                - if [ -d "archive-policies" ]; then pip install c7n==${C7NVersion}; fi
            build:
              commands:
                - if [ -d "archive-policies" ]; then curl -LO curl https://raw.githubusercontent.com/cloud-custodian/cloud-custodian/$(custodian version).0/tools/ops/mugc.py ;fi
                - if [ -d "archive-policies" ]; then python mugc.py --dryrun --assume ${CloudCustodianAdminRole.Arn} -c c7n-policies/*;fi
          artifacts:
            files:
              - '**/*'
        Type: NO_SOURCE

  CloudCustodianPolicyCleanupProject:
    Type: AWS::CodeBuild::Project
    Description: "If you have a c7n-policies directory this will run mugc using them"
    DependsOn: [ CloudCustodianCodeBuildRole ]
    Properties:
      Artifacts:
        Type: NO_ARTIFACTS
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/standard:4.0
        PrivilegedMode: false
        Type: LINUX_CONTAINER
      ServiceRole: !GetAtt CloudCustodianCodeBuildRole.Arn
      Source:
        BuildSpec: !Sub |
          version: '0.2'
          phases:
            install:
              runtime-versions:
                python: 3.x
              commands:
                - pip install c7n==${C7NVersion}
            build:
              commands:
                - curl -LO https://raw.githubusercontent.com/cloud-custodian/cloud-custodian/$(custodian version).0/tools/ops/mugc.py
                - python mugc.py ${Regions} --assume ${CloudCustodianAdminRole.Arn} -c c7n-policies/*
          artifacts:
            files:
              - '**/*'
        Type: NO_SOURCE

  CloudCustodianPolicyDeploymentDryRunProject:
    Type: AWS::CodeBuild::Project
    Description: "If you have a c7n-policies directory this will dry-run them, if you have c7n-org-policies directory it will dry-run them"
    DependsOn: [ CloudCustodianCodeBuildRole ]
    Properties:
      Artifacts:
        Type: NO_ARTIFACTS
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/standard:4.0
        PrivilegedMode: false
        Type: LINUX_CONTAINER
      ServiceRole: !GetAtt CloudCustodianCodeBuildRole.Arn
      Source:
        BuildSpec: !Sub |
          version: '0.2'
          phases:
            install:
              runtime-versions:
                python: 3.x
              commands:
                - if [ -d "c7n-policies" ]; then pip install c7n==${C7NVersion}; fi
                - if [ -d "c7n_mailer_config" ]; then pip install c7n-mailer==${C7NMailerVersion}; fi
                - if [ -d "c7n-org-policies" ]; then pip install c7n-org==${C7NOrgVersion}; fi
                - if [ ! -d "c7n-policies" ]; then echo "INFO - The c7n-policies directory does not exist. Create this and add cloudtrail policies to this directory to deploy"; fi
                - if [ ! -d "c7n-org-policies" ]; then echo "INFO - The c7n-org-policies directory does not exist create this directory and add policies you want to deploy locally in the individual accounts"; fi
                - if [ ! -f "c7n-org-policies/accounts.yml" ]; then echo "INFO - There is no accounts.yml file in the c7n-org-policies directory.  This configuration file is required to use c7n-org"; fi
            build:
              commands:
                #- c7n-mailer --config c7n_mailer_config/mailer.yml --templates c7n_mailer_config/templates/ --update-lambda
                - if [ -d "c7n-policies" ]; then custodian run --dryrun --assume ${CloudCustodianAdminRole.Arn} --output-dir output/logs c7n-policies/* -m aws -l /cloud-custodian/policies; fi
                - if [ -d "c7n-org-policies" ]; then c7n-org run --dryrun -c c7n-org-policies/accounts.yml -s output -u c7n-org-policies/* ${Regions} --verbose; fi
                - if [ ! -d "c7n-policies" ]; then echo "INFO - The c7n-policies directory does not exist. Create this and add cloudtrail policies to this directory to deploy"; fi
                - if [ ! -d "c7n-org-policies" ]; then echo "INFO - The c7n-org-policies directory does not exist create this directory and add policies you want to deploy locally in the individual accounts"; fi
                - if [ ! -f "c7n-org-policies/accounts.yml" ]; then echo "INFO - There is no accounts.yml file in the c7n-org-policies directory.  This configuration file is required to use c7n-org"; fi
          artifacts:
            files:
              - '**/*'
        Type: NO_SOURCE

  CloudCustodianPolicyDeploymentProject:
    Type: AWS::CodeBuild::Project
    Description: "If you have a c7n-policies directory this will run them, if you have c7n-org-policies directory it will run them"
    DependsOn: [ CloudCustodianCodeBuildRole ]
    Properties:
      Artifacts:
        Type: NO_ARTIFACTS
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/standard:4.0
        PrivilegedMode: false
        Type: LINUX_CONTAINER
      ServiceRole: !GetAtt CloudCustodianCodeBuildRole.Arn
      Source:
        BuildSpec: !Sub |
          version: '0.2'
          phases:
            install:
              runtime-versions:
                python: 3.x
              commands:
                - if [ -d "c7n-policies" ]; then pip install c7n==${C7NVersion}; fi
                - if [ -d "c7n_mailer_config" ]; then pip install c7n-mailer==${C7NMailerVersion}; fi
                - if [ -d "c7n-org-policies" ]; then pip install c7n-org==${C7NOrgVersion}; fi
                - if [ ! -f "c7n-org-policies/accounts.yml" ]; then echo "INFO - There is no accounts.yml file in the c7n-org-policies directory.  This configuration file is required to use c7n-org"; fi
            build:
              commands:
                #- c7n-mailer --config c7n_mailer_config/mailer.yml --templates c7n_mailer_config/templates/ --update-lambda
                - if [ -d "c7n-policies" ]; then custodian run ${Regions} --assume ${CloudCustodianAdminRole.Arn} --output-dir output/logs c7n-policies/*; fi
                - if [ -d "c7n-org-policies" ]; then c7n-org run -c c7n-org-policies/accounts.yml -s output -u c7n-org-policies/* ${Regions} --verbose; fi
                - if [ ! -d "c7n-org-policies" ]; then echo "The c7n-org-policies directory does not exist, nothing to do"; fi
                - if [ ! -d "c7n-policies" ]; then echo "The c7n-policies directory does not exist, nothing to do"; fi
                - if [ ! -f "c7n-org-policies/accounts.yml" ]; then echo "INFO - There is no accounts.yml file in the c7n-org-policies directory.  This configuration file is required to use c7n-org"; fi
          artifacts:
            files:
              - '**/*'
        Type: NO_SOURCE

  CloudCustodianPolicyDeploymentOrgProject:
    Type: AWS::CodeBuild::Project
    Description: "if you have a c7n-org-policies directory this will run c7-org for you"
    DependsOn: [ CloudCustodianCodeBuildRole ]
    Properties:
      Artifacts:
        Type: NO_ARTIFACTS
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/standard:4.0
        PrivilegedMode: false
        Type: LINUX_CONTAINER
      ServiceRole: !GetAtt CloudCustodianCodeBuildRole.Arn
      Source:
        BuildSpec: !Sub |
          version: '0.2'
          phases:
            install:
              runtime-versions:
                python: 3.x
              commands:
                - if [ -d "c7n-policies" ]; then pip install c7n==${C7NVersion}; fi
                - if [ -d "c7n_mailer_config" ]; then pip install c7n-mailer==${C7NMailerVersion}; fi
                - if [ -d "c7n-org-policies" ]; then pip install c7n-org==${C7NOrgVersion}; fi
            build:
              commands:
                - if [ -d "c7n-org-policies" ]; then c7n-org run -c c7n-org-policies/accounts.yml -s output -u c7n-org-policies/* ${Regions} --verbose; fi
                - if [ -d "c7n-org-policies" ]; then c7n-org report -c c7n-org-policies/accounts.yml -s output -u c7n-org-policies/* ${Regions}; fi
                - if [ ! -d "c7n-org-policies" ]; then echo "The c7n-org-policies directory does not exist, recommended removing this action from the pipeline."; fi
          artifacts:
            files:
              - '**/*'
        Type: NO_SOURCE


Outputs:
  CloudCustodianSNSTopicArn:
    Description: ARN of the Alerts SNS Topic
    Value: !Ref CloudCustodianSNSTopic

  CloudCustodianSNSTopicName:
    Description: Topic Name of the Alerts SNS Topic
    Value: !GetAtt CloudCustodianSNSTopic.TopicName

  CloudCustodianSQSMailerUrl:
    Description: URL of the SQS queue
    Value: !Ref CloudCustodianSQSMailer

  CloudCustodianSQSMailerUrlArn:
    Description: Arn of the SQS queue
    Value: !GetAtt CloudCustodianSQSMailer.Arn

  CloudCustodianSQSMailerUrlQueueName:
    Description: QueueName of the SQS queue
    Value: !GetAtt CloudCustodianSQSMailer.QueueName
